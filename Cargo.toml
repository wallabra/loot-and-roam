cargo-features = ["codegen-backend"]

[package]
name = "loot-and-roam"
version = "0.1.0"
edition = "2024"
authors = ["GameCircular team"] # Please see AUTHORS.md

[dependencies.bevy]
version = "^0.16.0"
# Disable the default features if there are any that you do not want
default-features = false
features = [
  #### DEFAULT ####

  "animation",                   # Enable animation for everything that supports it
  "bevy_asset",                  # Asset management
  # "bevy_audio",                  # Audio support [TODO]
  "bevy_color",                  # Color management
  "bevy_core_pipeline",          # Bevy's GPU rendering architecture
  # "bevy_gilrs",                  # Gamepad/controller support [TODO]
  "bevy_gizmos",                 # Gizmos (drawing debug lines and shapes)
  "bevy_image",                  # Image support
  "bevy_input_focus",            # Input focusing system for UI
  "bevy_log",                    # Logging to console
  # "bevy_mesh_picking_backend",   # 3D mesh picking (selection by cursor) [TODO]
  "bevy_pbr",                    # 3D rendering and Physically Based Shading
  # "bevy_picking",                # Picking (selection of objects by cursor) [TODO]
  "bevy_render",                 # GPU support (based on `wgpu`)
  "bevy_scene",                  # ECS Scenes
  "bevy_sprite",                 # 2D rendering (sprites, meshes, text)
  # "bevy_sprite_picking_backend", # 2D sprite picking (selection by cursor) [TODO]
  "bevy_state",                  # App state management
  "bevy_text",                   # Text rendering
  # "bevy_ui",                     # UI toolkit [TODO]
  # "bevy_ui_picking_backend",     # UI node picking (selection by cursor) [TODO]
  "bevy_window",                 # Window management
  "bevy_winit",                  # Cross-platform window management support

  # Low-level tunables
  "std",            # Use the Rust standard library (important!)
  "async_executor", # Enable the Async Executor (Bevy task pools)
  "multi_threaded", # Enable CPU multithreading
  "sysinfo_plugin", # Support CPU and RAM usage diagnostics
  # "custom_cursor",  # Support custom cursors [TODO]

  # Platform-Specific
  "x11",                   # Linux: Support X11 windowing system
  "android_shared_stdcxx", # Android: use shared C++ library
  "android-game-activity", # Android: use GameActivity instead of NativeActivity
  "webgl2",                # Web: use WebGL2 instead of WebGPU

  # Built-in Data
  "default_font",       # Built-in default font for UI (Fira Mono)
  "smaa_luts",          # Support SMAA antialiasing
  "tonemapping_luts",   # Support different camera Tonemapping modes (enables KTX2+zstd) [TODO]

  # Asset File Format Support
  # "bevy_gltf", # GLTF 3D asset support [TODO]
  "png",       # PNG image format for simple 2D images
  # "hdr",       # HDR image format [TODO]
  # "ktx2",      # KTX2 format for GPU texture data
  # "zstd",      # ZSTD compression support in KTX2 files
  # "vorbis",    # Audio: OGG Vorbis [TODO]

  #### NON-DEFAULT ####

  # General Bevy features
  # "ghost_nodes", # UI ghost nodes

  # Low level tunables
  # "async-io",             # Use `async-io` instead of `futures-lite` [TODO]
  # "serialize",            # Support for `serde` Serialize/Deserialize [TODO]
  # "subpixel_glyph_atlas", # Subpixel antialiasing for text/fonts
  # "reflect_documentation", # Documentation reflection support
  # "reflect_functions",    # Function reflection support

  # Platform-Specific
  "wayland",                  # Linux: Support Wayland windowing system
  # "accesskit_unix",           # UNIX-like: AccessKit Accessibility Framework support
  # "android-native-activity",  # Android: Use NativeActivity instead of GameActivity
  # "spirv_shader_passthrough", # Vulkan: allow direct loading of SPIR-V shader blobs without validation
  # "webgpu",                   # Web: use the faster, modern, experimental WebGPU API instead of WebGL2
  # "statically-linked-dxc",    # Windows: embed the DirectX Shader Compiler into your game binary
  # "web",                      # Web platform integration
  # "libm",                     # Use libm for math on non-std / embedded platforms
  # "critical-section",         # For supporting no-std / embedded
  # "default_no_std",

  # Graphics/rendering features (may cause issues on old/weak GPUs)
  # "experimental_pbr_pcss", # PCSS shadow filtering
  # "meshlet",               # Meshlet / virtual geometry rendering (like Unreal's Nanite)
  # "pbr_anisotropy_texture", # Support Anisotropy Map texture
  # "pbr_multi_layer_material_textures", # Support multi-layer textures
  # "pbr_specular_textures",  # Support specular map textures
  # "pbr_transmission_textures", # Support textures for light transimssion (translucency)

  # Development features
  "dynamic_linking",     # Dynamic linking for faster compile-times
  # "asset_processor",     # Enable asset processing support [TODO]
  # "bevy_dev_tools",      # Extra dev functionality (like FPS overlay)
  # "bevy_remote",         # Enable BRP (Bevy Remote Protocol) for integration with editors and external dev tools
  # "file_watcher",        # Asset hot-reloading
  # "meshlet_processor",   # Asset processor to convert meshes into meshlet format
  # "glam_assert",         # Math validation / debug assertions
  # "debug_glam_assert",   # Math validation / debug assertions
  # "bevy_ui_debug",       # UI debugging functionality
  # "bevy_ci_testing",     # For testing of Bevy itself in CI
  # "embedded_watcher",    # Hot-reloading for Bevy's internal/builtin assets
  # "configurable_error_handler",
  # "trace",               # Enable tracing
  # "trace_chrome",        # Enable tracing using the Chrome backend
  # "trace_tracy",         # Enable tracing using Tracy
  # "trace_tracy_memory",  # Enable memory tracking for Tracy
  # "track_location",      # Enable location tracking
  # "detailed_trace",      # Extra verbose tracing

  # Asset File Format Support
  # "basis-universal", # Basis Universal GPU texture compression format
  # "bmp",  # Uncompressed BMP image format
  # "dds",  # DDS (DirectX) format for GPU textures, alternative to KTX2
  # "exr",  # OpenEXR advanced image format
  # "ff",   # FF image support
  # "flac", # Audio: FLAC lossless format
  # "gif",  # GIF legacy image format
  # "ico",  # ICO image format (Windows icons)
  # "jpeg", # JPEG lossy format for photos
  # "mp3",  # Audio: MP3 format (not recommended)
  # "minimp3", # Alternative MP3 decoder
  # "pnm",  # PNM (pam, pbm, pgm, ppm) image format
  # "qoi",  # QOI image format
  # "shader_format_glsl",  # GLSL shader support [TODO]
  # "shader_format_spirv", # SPIR-V shader support
  # "shader_format_wesl",  # WESL (Extended WGSL) shader support
  # "tga",  # Truevision Targa image format
  # "tiff", # TIFF image format
  # "wav",  # Audio: Uncompressed WAV
  # "webp", # WebP image format
  # "zlib", # zlib compression support in KTX2 files
  # "symphonia-aac", # AAC audio format (via Symphonia library)
  # "symphonia-flac", # Alternative FLAC audio decoder (via Symphonia library)
  # "symphonia-isomp4", # MP4 format (via Symphonia library)
  # "symphonia-vorbis", # Alternative Ogg Vorbis audio support (via Symphonia library)
  # "symphonia-wav", # Alternative WAV audio support (via Symphonia library)
  # "symphonia-all", # All Audio formats supported by the Symphonia library
]

[dependencies]
derive_builder = "0.20.2"
enum_dispatch = "0.3.13"
itertools = "0.14.0"
rand = "0.9.0"
range-ext = "0.3.0"
serde = "1.0.218"
slotmap = { version = "1.0.7", features = ["serde"] }

[lib]
crate-type = ["cdylib", "rlib"]

[dev-dependencies]
assertables = "9.5.0"
bevy_image_export = "^0.13.0"

# --- Bevy-recommended tweaks

[profile.dev]
# Enable Cranelift codegen
codegen-backend = "cranelift"
# Enable a small amount of optimization in the dev profile.
opt-level = 1

# Enable a large amount of optimization in the dev profile for dependencies.
[profile.dev.package."*"]
opt-level = 3

# Enable more optimization in the release profile at the cost of compile time.
[profile.release]
# Compile the entire crate as one unit.
# Slows compile times, marginal improvements.
codegen-units = 1
# Do a second optimization pass over the entire program, including dependencies.
# Slows compile times, marginal improvements.
lto = "thin"

# Optimize for size in the wasm-release profile to reduce load times and bandwidth usage on web.
[profile.wasm-release]
# Default to release profile values.
inherits = "release"
# Optimize with size in mind (also try "z", sometimes it is better).
# Slightly slows compile times, great improvements to file size and runtime performance.
opt-level = "s"
# Strip all debugging information from the binary to slightly reduce file size.
strip = "debuginfo"

